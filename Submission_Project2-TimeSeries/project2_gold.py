# -*- coding: utf-8 -*-
"""Project2-Gold.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-e-xhOdC__O1a20cexgydEOfutVzz4LY
"""

import pandas as pd

df = pd.read_csv('C:/Users/ASUS/Downloads/TUGASKU/Dicoding/Lintasarta/Project2-MembuatModelMachineLearningdenganDataTimeSeries/Gold Price (2013-2023).csv')
df

df.info()

df.isnull().sum()

df['date']=pd.to_datetime(df['Date'])
df.head()

df.dtypes

# Mengonversi tipe data kolom ke objek jika belum
df['Change'] = df['Change %'].astype(str)
df['Price'] = df['Price'].astype(str)

# Menghapus karakter non-numerik dan mengonversi tipe data kolom
df['Change'] = df['Change %'].str.rstrip('%').astype(float) / 100
df['Price'] = df['Price'].str.replace(',', '').astype(float)

print(df)

df.dtypes

new_df = df.drop('Date', axis = 1)
new_df.set_index('date', inplace = True)
new_df

new_df.dtypes

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.plot(new_df.index, new_df['Change'], label='Change', color='blue', linestyle='-')
plt.title('Change')
plt.xlabel('Tahun')
plt.ylabel('Change')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(new_df.index, new_df['Price'], label='Price', color='red', linestyle='-')
plt.title('Price')
plt.xlabel('Tahun')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()

from sklearn.preprocessing import StandardScaler

# Inisialisasi StandardScaler
scaler = StandardScaler()

# Normalisasi fitur-fitur dalam DataFrame (misalnya, kolom 'Price' dan 'Change %')
normalized_features = scaler.fit_transform(df[['Price', 'Change']])

# Mengganti fitur-fitur dalam DataFrame dengan fitur-fitur yang sudah dinormalisasi
df[['Price', 'Change']] = normalized_features

# Tampilkan DataFrame setelah normalisasi
print(df)

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.plot(df.index, df['Change'], label='Change', color='green', linestyle='-')
plt.title('Change')
plt.xlabel('Tahun')
plt.ylabel('Change')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(df.index, df['Price'], label='Price', color='red', linestyle='-')
plt.title('Price')
plt.xlabel('Tahun')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()

date = df['date'].values
energy = df['Change'].values

print(date.shape)
print(energy.shape)

from sklearn.model_selection import train_test_split

date_train, date_test, energy_train, energy_test = train_test_split(date, energy, test_size = 0.2, shuffle = False, random_state=123)

from sklearn.preprocessing import StandardScaler

energy_train = energy_train.reshape(-1, 1)
energy_test = energy_test.reshape(-1, 1)

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift = 1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))

    return ds.batch(batch_size).prefetch(1)

print(len(energy_train), len(energy_test))

x_energy_train = windowed_dataset(energy_train, window_size=60, batch_size=100, shuffle_buffer=5000)
x_energy_test = windowed_dataset(energy_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(128, return_sequences = True, input_shape=[None, 1]),
  tf.keras.layers.LSTM(256, return_sequences= True),
  tf.keras.layers.LSTM(128),
  tf.keras.layers.Dense(128, activation="relu"),
  tf.keras.layers.Dense(64, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

threshold_mae = (df['Change'].max() - df['Change'].min()) * 10/100
print(threshold_mae)

# callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < threshold_mae) and (logs.get('val_mae') < threshold_mae):
      self.model.stop_training = True
      print("\nMAE < 10% dari skala data")
callbacks = myCallback()


#train
tf.keras.backend.set_floatx('float64')
history = model.fit(x_energy_train,
                    validation_data = x_energy_test,
                    epochs=10,
                    callbacks = [callbacks]
                    )

print("MAE terakhir: ", history.history['mae'][-1])
print("Val MAE terakhir: ", history.history['val_mae'][-1])